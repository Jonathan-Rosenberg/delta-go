// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.3
// Revision: 8e2c93debfc66888870b2dfd86e70c79a70c920f
// Build Date: 2022-11-09T16:39:46Z
// Built By: goreleaser

package op

import (
	"errors"
	"fmt"
)

type Name string

const (
	// WRITE is a Name of type WRITE.
	WRITE Name = "WRITE"
	// STREAMINGUPDATE is a Name of type STREAMING_UPDATE.
	STREAMINGUPDATE Name = "STREAMING_UPDATE"
	// DELETE is a Name of type DELETE.
	DELETE Name = "DELETE"
	// TRUNCATE is a Name of type TRUNCATE.
	TRUNCATE Name = "TRUNCATE"
	// CONVERT is a Name of type CONVERT.
	CONVERT Name = "CONVERT"
	// MERGE is a Name of type MERGE.
	MERGE Name = "MERGE"
	// UPDATE is a Name of type UPDATE.
	UPDATE Name = "UPDATE"
	// CREATETABLE is a Name of type CREATE_TABLE.
	CREATETABLE Name = "CREATE_TABLE"
	// REPLACETABLE is a Name of type REPLACE_TABLE.
	REPLACETABLE Name = "REPLACE_TABLE"
	// SETTABLEPROPERTIES is a Name of type SET_TABLE_PROPERTIES.
	SETTABLEPROPERTIES Name = "SET_TABLE_PROPERTIES"
	// UNSETTABLEPROPERTIES is a Name of type UNSET_TABLE_PROPERTIES.
	UNSETTABLEPROPERTIES Name = "UNSET_TABLE_PROPERTIES"
	// ADDCOLUMNS is a Name of type ADD_COLUMNS.
	ADDCOLUMNS Name = "ADD_COLUMNS"
	// CHANGECOLUMN is a Name of type CHANGE_COLUMN.
	CHANGECOLUMN Name = "CHANGE_COLUMN"
	// REPLACECOLUMNS is a Name of type REPLACE_COLUMNS.
	REPLACECOLUMNS Name = "REPLACE_COLUMNS"
	// UPGRADEPROTOCOL is a Name of type UPGRADE_PROTOCOL.
	UPGRADEPROTOCOL Name = "UPGRADE_PROTOCOL"
	// UPGRADESCHEMA is a Name of type UPGRADE_SCHEMA.
	UPGRADESCHEMA Name = "UPGRADE_SCHEMA"
	// MANUALUPDATE is a Name of type MANUAL_UPDATE.
	MANUALUPDATE Name = "MANUAL_UPDATE"
)

var ErrInvalidName = errors.New("not a valid Name")

// String implements the Stringer interface.
func (x Name) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x Name) IsValid() bool {
	_, err := ParseName(string(x))
	return err == nil
}

var _NameValue = map[string]Name{
	"WRITE":                  WRITE,
	"STREAMING_UPDATE":       STREAMINGUPDATE,
	"DELETE":                 DELETE,
	"TRUNCATE":               TRUNCATE,
	"CONVERT":                CONVERT,
	"MERGE":                  MERGE,
	"UPDATE":                 UPDATE,
	"CREATE_TABLE":           CREATETABLE,
	"REPLACE_TABLE":          REPLACETABLE,
	"SET_TABLE_PROPERTIES":   SETTABLEPROPERTIES,
	"UNSET_TABLE_PROPERTIES": UNSETTABLEPROPERTIES,
	"ADD_COLUMNS":            ADDCOLUMNS,
	"CHANGE_COLUMN":          CHANGECOLUMN,
	"REPLACE_COLUMNS":        REPLACECOLUMNS,
	"UPGRADE_PROTOCOL":       UPGRADEPROTOCOL,
	"UPGRADE_SCHEMA":         UPGRADESCHEMA,
	"MANUAL_UPDATE":          MANUALUPDATE,
}

// ParseName attempts to convert a string to a Name.
func ParseName(name string) (Name, error) {
	if x, ok := _NameValue[name]; ok {
		return x, nil
	}
	return Name(""), fmt.Errorf("%s is %w", name, ErrInvalidName)
}

// MustParseName converts a string to a Name, and panics if is not valid.
func MustParseName(name string) Name {
	val, err := ParseName(name)
	if err != nil {
		panic(err)
	}
	return val
}
